services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "sh", "-c", "echo srvr | nc localhost 2181"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'

  postgres:
    image: postgres:13
    environment:
      POSTGRES_DB: fraud_detection
      POSTGRES_USER: fraud_user
      POSTGRES_PASSWORD: fraud_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fraud_user -d fraud_detection"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  fraud-detection:
    build: .
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    env_file:
      - .env.kafka
    environment:
      - DATABASE_URL=postgresql://fraud_user:fraud_password@postgres:5432/fraud_detection
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - SESSION_SECRET=your-secret-key-change-in-production
      - FLASK_ENV=production
    volumes:
      - ./saved_models:/app/saved_models
      - ./attached_assets:/app/attached_assets
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-consumer:
    build: .
    command: python kafka_consumer.py --high-performance --parallel=2 --batch-size=100
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    env_file:
      - .env.kafka
    environment:
      - DATABASE_URL=postgresql://fraud_user:fraud_password@postgres:5432/fraud_detection
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DOCKER_CONTAINER=true
    volumes:
      - ./saved_models:/app/saved_models
      - ./attached_assets:/app/attached_assets
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # data-simulator:
  #   build: .
  #   command: python data_simulator.py
  #   depends_on:
  #     kafka:
  #       condition: service_started
  #   env_file:
  #     - .env.kafka
  #   environment:
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
  #     - SIMULATION_MODE=single
  #     - BASE_TPS=10
  #     - FRAUD_RATE=0.02
  #   restart: unless-stopped
  #   # Uncomment this service if you want automatic data simulation
  #   # For on-demand streaming, use the database streaming controls in the web dashboard

volumes:
  postgres_data:
  redis_data:
